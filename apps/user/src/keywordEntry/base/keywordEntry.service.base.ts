/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  KeywordEntry as PrismaKeywordEntry,
  Project as PrismaProject,
} from "@prisma/client";

export class KeywordEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KeywordEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.keywordEntry.count(args);
  }

  async keywordEntries(
    args: Prisma.KeywordEntryFindManyArgs
  ): Promise<PrismaKeywordEntry[]> {
    return this.prisma.keywordEntry.findMany(args);
  }
  async keywordEntry(
    args: Prisma.KeywordEntryFindUniqueArgs
  ): Promise<PrismaKeywordEntry | null> {
    return this.prisma.keywordEntry.findUnique(args);
  }
  async createKeywordEntry(
    args: Prisma.KeywordEntryCreateArgs
  ): Promise<PrismaKeywordEntry> {
    return this.prisma.keywordEntry.create(args);
  }
  async updateKeywordEntry(
    args: Prisma.KeywordEntryUpdateArgs
  ): Promise<PrismaKeywordEntry> {
    return this.prisma.keywordEntry.update(args);
  }
  async deleteKeywordEntry(
    args: Prisma.KeywordEntryDeleteArgs
  ): Promise<PrismaKeywordEntry> {
    return this.prisma.keywordEntry.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.keywordEntry
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
