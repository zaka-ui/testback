/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EditHistoryService } from "../editHistory.service";
import { EditHistoryCreateInput } from "./EditHistoryCreateInput";
import { EditHistoryWhereInput } from "./EditHistoryWhereInput";
import { EditHistoryWhereUniqueInput } from "./EditHistoryWhereUniqueInput";
import { EditHistoryFindManyArgs } from "./EditHistoryFindManyArgs";
import { EditHistoryUpdateInput } from "./EditHistoryUpdateInput";
import { EditHistory } from "./EditHistory";

export class EditHistoryGrpcControllerBase {
  constructor(protected readonly service: EditHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EditHistory })
  @GrpcMethod("EditHistoryService", "createEditHistory")
  async createEditHistory(
    @common.Body() data: EditHistoryCreateInput
  ): Promise<EditHistory> {
    return await this.service.createEditHistory({
      data: data,
      select: {
        changeDescription: true,
        createdAt: true,
        editTimestamp: true,
        id: true,
        relatedProject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EditHistory] })
  @ApiNestedQuery(EditHistoryFindManyArgs)
  @GrpcMethod("EditHistoryService", "editHistories")
  async editHistories(@common.Req() request: Request): Promise<EditHistory[]> {
    const args = plainToClass(EditHistoryFindManyArgs, request.query);
    return this.service.editHistories({
      ...args,
      select: {
        changeDescription: true,
        createdAt: true,
        editTimestamp: true,
        id: true,
        relatedProject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EditHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EditHistoryService", "editHistory")
  async editHistory(
    @common.Param() params: EditHistoryWhereUniqueInput
  ): Promise<EditHistory | null> {
    const result = await this.service.editHistory({
      where: params,
      select: {
        changeDescription: true,
        createdAt: true,
        editTimestamp: true,
        id: true,
        relatedProject: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EditHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EditHistoryService", "updateEditHistory")
  async updateEditHistory(
    @common.Param() params: EditHistoryWhereUniqueInput,
    @common.Body() data: EditHistoryUpdateInput
  ): Promise<EditHistory | null> {
    try {
      return await this.service.updateEditHistory({
        where: params,
        data: data,
        select: {
          changeDescription: true,
          createdAt: true,
          editTimestamp: true,
          id: true,
          relatedProject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EditHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EditHistoryService", "deleteEditHistory")
  async deleteEditHistory(
    @common.Param() params: EditHistoryWhereUniqueInput
  ): Promise<EditHistory | null> {
    try {
      return await this.service.deleteEditHistory({
        where: params,
        select: {
          changeDescription: true,
          createdAt: true,
          editTimestamp: true,
          id: true,
          relatedProject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
