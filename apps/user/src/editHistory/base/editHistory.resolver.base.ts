/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EditHistory } from "./EditHistory";
import { EditHistoryCountArgs } from "./EditHistoryCountArgs";
import { EditHistoryFindManyArgs } from "./EditHistoryFindManyArgs";
import { EditHistoryFindUniqueArgs } from "./EditHistoryFindUniqueArgs";
import { CreateEditHistoryArgs } from "./CreateEditHistoryArgs";
import { UpdateEditHistoryArgs } from "./UpdateEditHistoryArgs";
import { DeleteEditHistoryArgs } from "./DeleteEditHistoryArgs";
import { EditHistoryService } from "../editHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EditHistory)
export class EditHistoryResolverBase {
  constructor(
    protected readonly service: EditHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EditHistory",
    action: "read",
    possession: "any",
  })
  async _editHistoriesMeta(
    @graphql.Args() args: EditHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EditHistory])
  @nestAccessControl.UseRoles({
    resource: "EditHistory",
    action: "read",
    possession: "any",
  })
  async editHistories(
    @graphql.Args() args: EditHistoryFindManyArgs
  ): Promise<EditHistory[]> {
    return this.service.editHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EditHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EditHistory",
    action: "read",
    possession: "own",
  })
  async editHistory(
    @graphql.Args() args: EditHistoryFindUniqueArgs
  ): Promise<EditHistory | null> {
    const result = await this.service.editHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EditHistory)
  @nestAccessControl.UseRoles({
    resource: "EditHistory",
    action: "create",
    possession: "any",
  })
  async createEditHistory(
    @graphql.Args() args: CreateEditHistoryArgs
  ): Promise<EditHistory> {
    return await this.service.createEditHistory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EditHistory)
  @nestAccessControl.UseRoles({
    resource: "EditHistory",
    action: "update",
    possession: "any",
  })
  async updateEditHistory(
    @graphql.Args() args: UpdateEditHistoryArgs
  ): Promise<EditHistory | null> {
    try {
      return await this.service.updateEditHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EditHistory)
  @nestAccessControl.UseRoles({
    resource: "EditHistory",
    action: "delete",
    possession: "any",
  })
  async deleteEditHistory(
    @graphql.Args() args: DeleteEditHistoryArgs
  ): Promise<EditHistory | null> {
    try {
      return await this.service.deleteEditHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
